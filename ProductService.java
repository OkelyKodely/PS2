
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.awt.print.Book;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author dhcho
 */
public class ProductService extends javax.swing.JFrame {

    private String category, productName;
    private Paging paging;
    private int totalPages;
    private int totalRecords;
    private Product currentProduct;
    private File file;
    private byte[] imgBytes;
    private String printType = "";
    private String printStr = "";
    private String currentPagePrintStr = "";
    private String currentProductPrintStr = "";

    /**
     * Creates new form ProductService
     */
    public ProductService(String category, String productName)
    {
        this.category = category;
        this.productName = productName;
        
        if(this.category == null)
            this.category = "all";

        if(this.productName == null)
            this.productName = "";

        paging = new Paging();
        paging.setCurrentPage(1);
        paging.setRecordsPerPage(15);
        getInitialProductsInfo();
        paging.setPages(totalPages);
        paging.setTotalRecords(totalRecords);
        
        initComponents();

        getCategories();
        getProducts();

        jtblProducts.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
            public void valueChanged(ListSelectionEvent event) {
                try
                {
                    String productID = jtblProducts.getValueAt(jtblProducts.getSelectedRow(), 0).toString();
                    currentProduct = getProduct(productID);
                    setProduct(currentProduct);
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
            }
        });
        
        jScrollPane2.getViewport().setBackground(Color.WHITE);
    }
    
    private void setProduct(Product product)
    {
        jtxtProductID1.setText(product.getProductID());
        jtxtName.setText(product.getName());
        jtxtPrice.setText(product.getPrice()+"");
        jtxtStockQty.setText(product.getStockQty()+"");
        jtxtDesc.setText(product.getDescription());
    }

    public Connection getConnection()
    {
        Connection conn = null;

        String hostName = "ec2-54-163-240-54.compute-1.amazonaws.com";
        String dbName = "d89l9begjikklj";
        String userName = "isscllglmxgeln";
        String password = "334f696049572d4bc9c3b6b78c3410301e24dd3b5fd2b96dc15bf4c1c6fed113";

        try
        {
            Class.forName("org.postgresql.Driver");
            String url = "jdbc:postgresql://" + hostName + "/" + dbName + "?user=" + userName + "&password=" + password + "&ssl=true&sslfactory=org.postgresql.ssl.NonValidatingFactory";
            conn = DriverManager.getConnection(url);
            return conn;
        }
        catch(Exception e)
        {
            e.printStackTrace();

            return null;
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        label3 = new java.awt.Label();
        label4 = new java.awt.Label();
        jtxtProductID1 = new javax.swing.JTextField();
        jtxtName = new javax.swing.JTextField();
        jtxtPrice = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        label5 = new java.awt.Label();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtxtDesc = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtblProducts = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        label6 = new java.awt.Label();
        jtxtStockQty = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        shallYouValidate = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        label7 = new java.awt.Label();
        jcmbCategories = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1280, 750));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(245, 245, 245));
        jPanel1.setMinimumSize(new java.awt.Dimension(1190, 750));
        jPanel1.setPreferredSize(new java.awt.Dimension(1200, 750));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        label1.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        label1.setText("Desc");
        jPanel1.add(label1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 430, -1, -1));

        label2.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        label2.setText("Product ID");
        jPanel1.add(label2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, -1, -1));

        label3.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        label3.setText("Name");
        jPanel1.add(label3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 90, -1, -1));

        label4.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        label4.setText("Price");
        jPanel1.add(label4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 160, -1, -1));

        jtxtProductID1.setBackground(new java.awt.Color(245, 245, 245));
        jtxtProductID1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jtxtProductID1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxtProductID1ActionPerformed(evt);
            }
        });
        jtxtProductID1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtProductID1KeyPressed(evt);
            }
        });
        jPanel1.add(jtxtProductID1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 20, 180, 60));

        jtxtName.setBackground(new java.awt.Color(245, 245, 245));
        jtxtName.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jtxtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxtNameActionPerformed(evt);
            }
        });
        jtxtName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtNameKeyPressed(evt);
            }
        });
        jPanel1.add(jtxtName, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 90, 240, 60));

        jtxtPrice.setBackground(new java.awt.Color(245, 245, 245));
        jtxtPrice.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jtxtPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxtPriceActionPerformed(evt);
            }
        });
        jtxtPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtPriceKeyPressed(evt);
            }
        });
        jPanel1.add(jtxtPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 160, 240, 60));

        jLabel1.setBackground(new java.awt.Color(204, 204, 204));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText(" Choose Image...");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 230, 240, 210));

        label5.setFont(new java.awt.Font("Dialog", 1, 32)); // NOI18N
        label5.setText("Category");
        jPanel1.add(label5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 300, -1, -1));

        jtxtDesc.setBackground(new java.awt.Color(245, 245, 245));
        jtxtDesc.setColumns(20);
        jtxtDesc.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jtxtDesc.setLineWrap(true);
        jtxtDesc.setRows(5);
        jtxtDesc.setAutoscrolls(false);
        jtxtDesc.setMinimumSize(new java.awt.Dimension(1000, 22));
        jtxtDesc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtDescKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jtxtDesc);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 490, 510, -1));

        jtblProducts.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jtblProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product ID", "Price", "Name", "Stock Qty"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtblProducts.setGridColor(new java.awt.Color(0, 0, 0));
        jtblProducts.setOpaque(false);
        jtblProducts.setRowHeight(28);
        jScrollPane2.setViewportView(jtblProducts);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 20, 360, 450));

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/delete.png"))); // NOI18N
        jButton1.setText("Delete");
        jButton1.setIconTextGap(10);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 620, 160, 80));

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/insert.png"))); // NOI18N
        jButton2.setText("Insert");
        jButton2.setIconTextGap(10);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 620, 150, 80));

        jButton3.setBackground(new java.awt.Color(255, 255, 255));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/update.png"))); // NOI18N
        jButton3.setText("Update");
        jButton3.setIconTextGap(10);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 620, 180, 80));

        jButton4.setBackground(new java.awt.Color(255, 255, 255));
        jButton4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/first.png"))); // NOI18N
        jButton4.setText("First");
        jButton4.setIconTextGap(10);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 490, 150, 80));

        jButton5.setBackground(new java.awt.Color(255, 255, 255));
        jButton5.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/previous.png"))); // NOI18N
        jButton5.setText("Prev");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 490, 140, 80));

        jButton6.setBackground(new java.awt.Color(255, 255, 255));
        jButton6.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/last.png"))); // NOI18N
        jButton6.setText("Last");
        jButton6.setIconTextGap(10);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 490, 150, 80));

        jButton7.setBackground(new java.awt.Color(255, 255, 255));
        jButton7.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/next.png"))); // NOI18N
        jButton7.setText("Next");
        jButton7.setIconTextGap(10);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 490, 140, 80));

        label6.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        label6.setText("Stock Qty");
        jPanel1.add(label6, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 20, -1, -1));

        jtxtStockQty.setBackground(new java.awt.Color(245, 245, 245));
        jtxtStockQty.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jtxtStockQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxtStockQtyActionPerformed(evt);
            }
        });
        jtxtStockQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtStockQtyKeyPressed(evt);
            }
        });
        jPanel1.add(jtxtStockQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 20, 110, 60));

        jPanel2.setBackground(new java.awt.Color(245, 245, 245));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("Database Application");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 200, -1, -1));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logo.png"))); // NOI18N
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 60, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 102, 102));
        jLabel4.setText("Product Service");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, -1, -1));

        jButton12.setText("Print All");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton12, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 260, -1, -1));

        jButton13.setText("Print Current Category");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton13, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 260, 150, -1));

        jButton14.setText("Print Current Page");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton14, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 310, -1, -1));

        jButton15.setText("Print Current Product");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton15, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 310, 150, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/print.png"))); // NOI18N
        jLabel5.setText("        ");
        jLabel5.setPreferredSize(new java.awt.Dimension(50, 50));
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 260, 30, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 100, 350, 370));

        shallYouValidate.setForeground(java.awt.Color.blue);
        jPanel1.add(shallYouValidate, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 600, -1, -1));

        jButton8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton8.setLabel("Exit");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 630, 520, 50));

        jButton9.setText("Save to Disk");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton9, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 440, -1, -1));

        label7.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        label7.setText("Image");
        jPanel1.add(label7, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 230, -1, -1));

        jPanel1.add(jcmbCategories, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 350, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jPanel3.setBackground(new java.awt.Color(0, 102, 255));
        jPanel3.setMinimumSize(new java.awt.Dimension(80, 750));
        jPanel3.setPreferredSize(new java.awt.Dimension(80, 750));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton10.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jButton10.setText("Category");
        jButton10.setMaximumSize(new java.awt.Dimension(65, 23));
        jButton10.setMinimumSize(new java.awt.Dimension(65, 23));
        jButton10.setPreferredSize(new java.awt.Dimension(65, 23));
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton10, new org.netbeans.lib.awtextra.AbsoluteConstraints(1, 100, 63, 70));

        jButton11.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jButton11.setText("Search");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton11, new org.netbeans.lib.awtextra.AbsoluteConstraints(1, 20, 63, 70));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jtxtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtxtNameActionPerformed

    private void jtxtPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxtPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtxtPriceActionPerformed

    private void jtxtProductID1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxtProductID1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtxtProductID1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(JOptionPane.showConfirmDialog(this, "Delete selected product item?", "Delete", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION)
        {
            try
            {
                Connection con = getConnection();

                PreparedStatement ps = con.prepareStatement(
                        "DELETE FROM products2 where productid = ?");
                ps.setString(1, jtxtProductID1.getText());
                ps.executeUpdate();
                ps.close();

                con.close();

                JOptionPane.showMessageDialog(null, "Deleted");

                getProducts();

                jButton2.setText("New");

                jtxtProductID1.setText("");
                jtxtName.setText("");
                jtxtPrice.setText("");
                jLabel1.setIcon(null);
                jtxtDesc.setText("");
                jtxtStockQty.setText("");
            }
            catch(Exception e)
            {
                e.printStackTrace();

                getProducts();
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        if(jButton2.getText().equals("New")) {
            jButton2.setText("Insert");

            jtxtProductID1.setText("");
            jtxtName.setText("");
            jtxtPrice.setText("");
            jLabel1.setIcon(null);
            jtxtDesc.setText("");
            jtxtStockQty.setText("");
            
            return;
        }
        
        //INSERT
        boolean isValid = validateForm();
        
        if(isValid && this.file != null)
        {
            //insert current product into the db table `products`
            currentProduct = new Product();
            currentProduct.setProductID(jtxtProductID1.getText());
            currentProduct.setName(jtxtName.getText());
            currentProduct.setPrice(Double.parseDouble(jtxtPrice.getText()));
            currentProduct.setImage(this.file);
            currentProduct.setDescription(jtxtDesc.getText());
            currentProduct.setStockQty(Integer.parseInt(jtxtStockQty.getText()));
    
            try
            {
                Connection con = getConnection();
                
                FileInputStream fis = new FileInputStream(currentProduct.getImage());
                PreparedStatement ps = con.prepareStatement(
                        "INSERT INTO products2 (productID, productName, price, image, description, stockQty, inputdate, category) VALUES (?, ?, ?, ?, ?, ?, current_timestamp, ?)");
                ps.setString(1, currentProduct.getProductID());
                ps.setString(2, currentProduct.getName());
                ps.setDouble(3, currentProduct.getPrice());
                ps.setBinaryStream(4, fis, (int) currentProduct.getImage().length());
                ps.setString(5, currentProduct.getDescription());
                ps.setInt(6, currentProduct.getStockQty());
                if(jcmbCategories.getSelectedItem() == null)
                    ps.setString(7, "all");
                else
                    ps.setString(7, jcmbCategories.getSelectedItem().toString());
                ps.executeUpdate();
                ps.close();
                fis.close();

                con.close();
                
                JOptionPane.showMessageDialog(null, "Inserted");
                
                getProducts();
                
                jtxtProductID1.setText("");
                jtxtName.setText("");
                jtxtPrice.setText("");
                jLabel1.setIcon(null);
                jtxtDesc.setText("");
                jtxtStockQty.setText("");
            }
            catch(Exception e)
            {
                e.printStackTrace();

                getProducts();
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void getInitialProductsInfo()
    {
        try
        {
            Connection con = getConnection();
        
            PreparedStatement ps = con.prepareStatement("select count(id) as totalRecords from products2;");
            ResultSet rs = ps.executeQuery();
            if(rs.next())
            {
                totalRecords = rs.getInt("totalRecords");
                totalPages = (int) Math.ceil((double) this.totalRecords/(double) paging.getRecordsPerPage());
                paging.setPages(totalPages);
                paging.setTotalRecords(totalRecords);
            }
            rs.close();
            ps.close();
            
            con.close();
        }
        catch(Exception e) {
            e.printStackTrace();
        }        
    }

    private void getProducts()
    {
        DefaultTableModel model = (DefaultTableModel) jtblProducts.getModel();

        int rowCount = model.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }

        this.getInitialProductsInfo();
        
        try
        {
            Connection con = getConnection();
            String sqlString = "select * from products2 order by inputdate desc"
                    + " limit " + paging.getRecordsPerPage() 
                    + " offset " + ((paging.getCurrentPage()-1)*paging.getRecordsPerPage())
                    + ";";
            if(!this.category.equals("all")) {
                sqlString = "select * from products2"
                    + " where category = ?"
                    + " order by inputdate desc"
                    + " limit " + paging.getRecordsPerPage() 
                    + " offset " + ((paging.getCurrentPage()-1)*paging.getRecordsPerPage())
                    + ";";
            }
            if(!this.productName.equals("")) {
                sqlString = "select * from products2"
                    + " where productName like ?"
                    + " order by inputdate desc"
                    + " limit " + paging.getRecordsPerPage() 
                    + " offset " + ((paging.getCurrentPage()-1)*paging.getRecordsPerPage())
                    + ";";
            }
            PreparedStatement ps = con.prepareStatement(
                    sqlString);
            if(!this.category.equals("all")) {
                ps.setString(1, this.category);
            }
            if(!this.productName.equals("")) {
                ps.setString(1, "%" + this.productName + "%");
            }
            ResultSet rs = ps.executeQuery();
            while(rs.next())
            {
                String a = rs.getString("productID");
                String b = rs.getString("price");
                String c = rs.getString("productName");
                String d = rs.getString("stockQty");
                model.addRow(new Object[]{a,b,c,d});
            }
            rs.close();
            ps.close();
            
            con.close();
            
            setPagingInfo();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
    
    private void setPagingInfo()
    {
        String titlestr = "";
        titlestr = paging.getInfo();
        setTitle(titlestr);
    }

    private void getCategories()
    {
        try
        {
            Connection con = getConnection();
        
            PreparedStatement ps = con.prepareStatement(
                    "select category from categories order by category asc"
            );
            ResultSet rs = ps.executeQuery();
            jcmbCategories.removeAllItems();
            while(rs.next())
            {
                jcmbCategories.addItem(rs.getString("category"));
            }
            rs.close();
            ps.close();
            
            con.close();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }

    private Product getProduct(String productID)
    {
        getCategories();
        
        Product product = new Product();
        
        try
        {
            Connection con = getConnection();
        
            PreparedStatement ps = con.prepareStatement("select * from products2 where productID = ?;");
            ps.setString(1, productID);
            ResultSet rs = ps.executeQuery();
            if(rs.next())
            {
                String a = rs.getString("productID");
                String b = rs.getString("price");
                String c = rs.getString("productName");
                String d = rs.getString("stockQty");
                String e = rs.getString("description");
                String f = rs.getString("category");
                this.imgBytes = rs.getBytes("image");
                this.file = File.createTempFile("tempImg", null, null);
                FileOutputStream fos = new FileOutputStream(this.file);
                fos.write(imgBytes);
                BufferedImage img = ImageIO.read(new ByteArrayInputStream(imgBytes));
                jLabel1.setIcon(resizeImage(img,jLabel1.getWidth(),jLabel1.getHeight()));
                product.setProductID(a);
                product.setPrice(Double.parseDouble(b));
                product.setName(c);
                product.setStockQty(Integer.parseInt(d));
                product.setDescription(e);
                jcmbCategories.setSelectedItem(f);
            }
            rs.close();
            ps.close();
            
            con.close();
 
            jButton2.setText("New");
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }

        return product;
    }
    
    private boolean validateForm()
    {
        boolean validationRequired = false;
        shallYouValidate.setText("");

        String productID = jtxtProductID1.getText();
        if(productID.length() == 0)
        {
            jtxtProductID1.setBackground(new Color(255,255,255));
            validationRequired = true;
        }
        else
        {
            jtxtProductID1.setBackground(new Color(245,245,245));
        }

        String productName = jtxtName.getText();
        if(productName.length() == 0)
        {
            jtxtName.setBackground(new Color(255,255,255));
            validationRequired = true;
        }
        else
        {
            jtxtName.setBackground(new Color(245,245,245));
        }

        String productPrice = jtxtPrice.getText();
        if(productPrice.length() == 0)
        {
            jtxtPrice.setBackground(new Color(255,255,255));
            validationRequired = true;
        }
        else
        {
            jtxtPrice.setBackground(new Color(245,245,245));
        }

        String productDesc = jtxtDesc.getText();
        if(productDesc.length() == 0)
        {
            jtxtDesc.setBackground(new Color(255,255,255));
            validationRequired = true;
        }
        else
        {
            jtxtDesc.setBackground(new Color(245,245,245));
        }

        String productQty = jtxtStockQty.getText();
        if(productQty.length() == 0)
        {
            jtxtStockQty.setBackground(new Color(255,255,255));
            validationRequired = true;
        }
        else
        {
            jtxtStockQty.setBackground(new Color(245,245,245));
        }
        
        if(validationRequired)
        {
            shallYouValidate.setForeground(Color.BLACK);
            shallYouValidate.setText("*PLEASE VALIDATE THE FIELDS THAT ARE WHITE!!!");
        }
        else
        {
            shallYouValidate.setText("");
        }
        
        return !validationRequired;
    }
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        //UPDATE
        boolean isValid = validateForm();
        
        if(isValid && this.file != null)
        {
            //update current product to the db table `products`
            currentProduct = new Product();
            currentProduct.setProductID(jtxtProductID1.getText());
            currentProduct.setName(jtxtName.getText());
            currentProduct.setPrice(Double.parseDouble(jtxtPrice.getText()));
            currentProduct.setImage(this.file);
            currentProduct.setDescription(jtxtDesc.getText());
            currentProduct.setStockQty(Integer.parseInt(jtxtStockQty.getText()));
    
            try
            {
                Connection con = getConnection();
                
                FileInputStream fis = new FileInputStream(currentProduct.getImage());
                PreparedStatement ps = con.prepareStatement(
                        "UPDATE products2 set productid = ?, productName = ?, price = ?, image = ?, description = ?, stockQty = ?, inputdate = current_timestamp, category = ? where productID = ?");
                ps.setString(1, currentProduct.getProductID());
                ps.setString(2, currentProduct.getName());
                ps.setDouble(3, currentProduct.getPrice());
                ps.setBinaryStream(4, fis, (int) currentProduct.getImage().length());
                ps.setString(5, currentProduct.getDescription());
                ps.setInt(6, currentProduct.getStockQty());
                ps.setString(7, jcmbCategories.getSelectedItem().toString());
                ps.setString(8, currentProduct.getProductID());
                ps.executeUpdate();
                ps.close();
                fis.close();

                con.close();
            
                JOptionPane.showMessageDialog(null, "Updated");
                
                getProducts();
            }
            catch(Exception e)
            {
                e.printStackTrace();
                getProducts();
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        paging.setCurrentPage(1);
        getProducts();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        paging.moveToPrevPage();
        getProducts();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        paging.setCurrentPage(paging.getPages());
        getProducts();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        paging.moveToNextPage();
        getProducts();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jtxtStockQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxtStockQtyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtxtStockQtyActionPerformed

    private ImageIcon resizeImage(BufferedImage b, int w, int h)
    {
        BufferedImage tempImg = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
        Graphics2D gr = tempImg.createGraphics();
        
        gr.drawImage(b, 0, 0, w, h, null);
        gr.dispose();
        
        return new ImageIcon(tempImg);
    }
    
    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        JFileChooser fc = new JFileChooser();
        int result = fc.showOpenDialog(null);
        if(result == JFileChooser.APPROVE_OPTION)
        {
            this.file = fc.getSelectedFile();
            try
            {
                BufferedImage b = ImageIO.read(file);
                ImageIcon ii = resizeImage(b, jLabel1.getWidth(), jLabel1.getHeight());
                jLabel1.setIcon(ii);
            }
            catch(Exception e)
            {
            }
        }
    }//GEN-LAST:event_jLabel1MouseClicked

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        JFrame frame = new JFrame();
        if(JOptionPane.showConfirmDialog(frame, "Confirm Exit?", "Exit", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION)
        {
            System.exit(0);
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        //Save Image
        if(this.file != null && this.imgBytes != null)
        {
            JFrame parentFrame = new JFrame();

            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Save to Disk");    

            int userSelection = fileChooser.showSaveDialog(parentFrame);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                try {
                    Thread myThread = new Thread(new Runnable() {
                        public void run() {
                            try {
                                FileOutputStream fos = new FileOutputStream(fileChooser.getSelectedFile());
                                fos.write(imgBytes);
                                JOptionPane.showMessageDialog(null, "Saved");
                                fos.close();
                            } catch(Exception e) {
                                e.printStackTrace();
                            }
                        }
                    });
                    myThread.start();
                } catch(Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jtxtProductID1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtProductID1KeyPressed
        jButton2.setText("Insert");
    }//GEN-LAST:event_jtxtProductID1KeyPressed

    private void jtxtNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtNameKeyPressed
        jButton2.setText("Insert");
    }//GEN-LAST:event_jtxtNameKeyPressed

    private void jtxtPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtPriceKeyPressed
        jButton2.setText("Insert");
    }//GEN-LAST:event_jtxtPriceKeyPressed

    private void jtxtDescKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtDescKeyPressed
        jButton2.setText("Insert");
    }//GEN-LAST:event_jtxtDescKeyPressed

    private void jtxtStockQtyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtStockQtyKeyPressed
        jButton2.setText("Insert");
    }//GEN-LAST:event_jtxtStockQtyKeyPressed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Categories().setVisible(true);
            }
        });
        this.dispose();
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Search().setVisible(true);
            }
        });
        this.dispose();
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        this.printType = "current page";
        
        String spacing = "";

        String fortySpaces = "";
        for(int a=0; a<40; a++)
            fortySpaces += " ";
        
        currentPagePrintStr = "";
        currentPagePrintStr = "Product ID" + fortySpaces + "Price     " + fortySpaces + "Name      " + fortySpaces + "Stock Qty\n \n";
        currentPagePrintStr += "---------------------------------------------------------------------------------------------------------------------------------------------------------------\n \n";

        DefaultTableModel model = (DefaultTableModel) jtblProducts.getModel();
        int columnCount = model.getColumnCount();
        int rowCount = model.getRowCount();
        for(int i=0; i<rowCount; i++)
        {
            for(int j=0; j<columnCount; j++)
            {
                String value = model.getValueAt(i, j).toString();
                int valueLength = value.length();
                spacing = "";
                for(int k=0; k<50-valueLength; k++)
                {
                    spacing += " ";
                }
                currentPagePrintStr += value + spacing;
            }
            currentPagePrintStr += "\n";
        }

        print();
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        this.printType = "current product";

        currentProductPrintStr = "";
        currentProductPrintStr = "Product ID: " + jtxtProductID1.getText() + "\n";
        currentProductPrintStr += "Name: " + jtxtName.getText() + "\n";
        currentProductPrintStr += "Price: " + jtxtPrice.getText() + "\n";
        currentProductPrintStr += "Category: " + jcmbCategories.getSelectedItem().toString() + "\n";
        currentProductPrintStr += "Description: " + jtxtDesc.getText() + "\n";
        currentProductPrintStr += "Stock Qty: " + jtxtStockQty.getText();
        
        print();
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        PrinterJob job = PrinterJob.getPrinterJob(); 
        PageFormat landscape = job.defaultPage();
        landscape.setOrientation(PageFormat.LANDSCAPE);
        Book bk = new Book();
        bk.append(new PaintCover(), job.defaultPage());
        job.setPageable(bk);
        if (job.printDialog()) {
            try {
                try
                {
                    Connection con = getConnection();
                    String sqlString = "select * from products2 order by inputdate desc";
                    PreparedStatement ps = con.prepareStatement(
                            sqlString);
                    ResultSet rs = ps.executeQuery();
                    printStr = "";
                    this.printType = "all";

                    String spacing = "";

                    String fortySpaces = "";
                    for(int a=0; a<40; a++)
                        fortySpaces += " ";

                    printStr = "";
                    printStr = "Product ID" + fortySpaces + "Price     " + fortySpaces + "Name      " + fortySpaces + "Stock Qty\n \n";
                    printStr += "---------------------------------------------------------------------------------------------------------------------------------------------------------------\n \n";
                    int i = 0;
                    while(rs.next())
                    {
                        if(i == 15)
                        {
                            job.print();
                            printStr = "";
                            printStr = "Product ID" + fortySpaces + "Price     " + fortySpaces + "Name      " + fortySpaces + "Stock Qty\n \n";
                            printStr += "---------------------------------------------------------------------------------------------------------------------------------------------------------------\n \n";
                            i = 0;
                        }
                        String a = rs.getString("productID");
                        String b = rs.getString("price");
                        String c = rs.getString("productName");
                        String d = rs.getString("stockQty");
                        String value = a;
                        int valueLength = value.length();
                        spacing = "";
                        for(int k=0; k<50-valueLength; k++)
                        {
                            spacing += " ";
                        }
                        printStr += value + spacing;
                        value = b;
                        valueLength = value.length();
                        spacing = "";
                        for(int k=0; k<50-valueLength; k++)
                        {
                            spacing += " ";
                        }
                        printStr += value + spacing;
                        value = c;
                        valueLength = value.length();
                        spacing = "";
                        for(int k=0; k<50-valueLength; k++)
                        {
                            spacing += " ";
                        }
                        printStr += value + spacing;
                        value = d;
                        valueLength = value.length();
                        spacing = "";
                        for(int k=0; k<50-valueLength; k++)
                        {
                            spacing += " ";
                        }
                        printStr += value + spacing;
                        printStr += "\n";
                        i++;
                    }
                    rs.close();
                    ps.close();

                    con.close();
                    
                    job.print();
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
            } catch (Exception exc) {
                System.out.println(exc);
            }
        }
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        if(this.category == null)
            return;
        PrinterJob job = PrinterJob.getPrinterJob(); 
        PageFormat landscape = job.defaultPage();
        landscape.setOrientation(PageFormat.LANDSCAPE);
        Book bk = new Book();
        bk.append(new PaintCover(), job.defaultPage());
        job.setPageable(bk);
        if (job.printDialog()) {
            try {
                try
                {
                    Connection con = getConnection();
                    String sqlString = "select * from products2 where category = '" + this.category + "' order by inputdate desc";
                    PreparedStatement ps = con.prepareStatement(
                            sqlString);
                    ResultSet rs = ps.executeQuery();
                    printStr = "";
                    this.printType = "all";

                    String spacing = "";

                    String fortySpaces = "";
                    for(int a=0; a<40; a++)
                        fortySpaces += " ";

                    printStr = "";
                    printStr = "Product ID" + fortySpaces + "Price     " + fortySpaces + "Name      " + fortySpaces + "Stock Qty\n \n";
                    printStr += "---------------------------------------------------------------------------------------------------------------------------------------------------------------\n \n";
                    int i = 0;
                    while(rs.next())
                    {
                        if(i == 15)
                        {
                            job.print();
                            printStr = "";
                            printStr = "Product ID" + fortySpaces + "Price     " + fortySpaces + "Name      " + fortySpaces + "Stock Qty\n \n";
                            printStr += "---------------------------------------------------------------------------------------------------------------------------------------------------------------\n \n";
                            i = 0;
                        }
                        String a = rs.getString("productID");
                        String b = rs.getString("price");
                        String c = rs.getString("productName");
                        String d = rs.getString("stockQty");
                        String value = a;
                        int valueLength = value.length();
                        spacing = "";
                        for(int k=0; k<50-valueLength; k++)
                        {
                            spacing += " ";
                        }
                        printStr += value + spacing;
                        value = b;
                        valueLength = value.length();
                        spacing = "";
                        for(int k=0; k<50-valueLength; k++)
                        {
                            spacing += " ";
                        }
                        printStr += value + spacing;
                        value = c;
                        valueLength = value.length();
                        spacing = "";
                        for(int k=0; k<50-valueLength; k++)
                        {
                            spacing += " ";
                        }
                        printStr += value + spacing;
                        value = d;
                        valueLength = value.length();
                        spacing = "";
                        for(int k=0; k<50-valueLength; k++)
                        {
                            spacing += " ";
                        }
                        printStr += value + spacing;
                        printStr += "\n";
                        i++;
                    }
                    rs.close();
                    ps.close();

                    con.close();
                    
                    job.print();
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
            } catch (Exception exc) {
                System.out.println(exc);
            }
        }
    }//GEN-LAST:event_jButton13ActionPerformed

    private void print()
    {
        PrinterJob job = PrinterJob.getPrinterJob(); 
        PageFormat landscape = job.defaultPage();
        landscape.setOrientation(PageFormat.LANDSCAPE);
        Book bk = new Book();
        bk.append(new PaintCover(), job.defaultPage());
        job.setPageable(bk);
        if (job.printDialog()) {
            try {
                job.print();
            } catch (Exception exc) {
                System.out.println(exc);
            }
        }
    }                                        

    private class PaintCover implements Printable
    {
        private Font fnt = new Font("Helvetica-Bold", Font.PLAIN, 14);

        public int print(Graphics g, PageFormat pf, int pageIndex) throws PrinterException
        {
            java.util.StringTokenizer st = null;
            g.setFont(fnt);
            g.setColor(Color.black);
            if(printType.equals("all"))
            {
                g.setFont(new Font("Helvetica-Bold", Font.PLAIN, 8));
                st = new java.util.StringTokenizer(printStr, "\n");
            }
            if(printType.equals("current page"))
            {
                g.setFont(new Font("Helvetica-Bold", Font.PLAIN, 8));
                st = new java.util.StringTokenizer(currentPagePrintStr, "\n");
            }
            if(printType.equals("current product"))
            {
                st = new java.util.StringTokenizer(currentProductPrintStr, "\n");
            }
            int i = 0;
            while(st.hasMoreTokens())
            {
                String line = st.nextToken();
                g.drawString(line, 100, 100 + i++*14);
            }
            return Printable.PAGE_EXISTS;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> jcmbCategories;
    private javax.swing.JTable jtblProducts;
    private javax.swing.JTextArea jtxtDesc;
    private javax.swing.JTextField jtxtName;
    private javax.swing.JTextField jtxtPrice;
    private javax.swing.JTextField jtxtProductID1;
    private javax.swing.JTextField jtxtStockQty;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label5;
    private java.awt.Label label6;
    private java.awt.Label label7;
    private javax.swing.JLabel shallYouValidate;
    // End of variables declaration//GEN-END:variables
}
